[{"id":"ca39b446.35c648","type":"inject","z":"350b6686.caf49a","name":"Morn Go","topic":"","payload":"A","payloadType":"str","repeat":"","crontab":"00 06 * * *","once":false,"x":105.33332824707031,"y":426.4444570541382,"wires":[["59fa4e05.a605b"]]},{"id":"59fa4e05.a605b","type":"function","z":"350b6686.caf49a","name":"A - start","func":"msg.payload = 'A';  // kick-off morning routine\n\nflow.set('nextleg','legnotstarted');\n\nreturn msg;","outputs":1,"noerr":0,"x":146.3333282470703,"y":465.4444570541382,"wires":[["4db32bcb.b24cd4"]]},{"id":"4db32bcb.b24cd4","type":"function","z":"350b6686.caf49a","name":"A:Choose Next Leg","func":"/* INPUT:\n        if starting flow in morning : msg.payload = 'A' ; flow.set('nextleg',undefined)  \n        if flow from <C:Legrest>    : msg.payload = 'do-nextleg'\n   OUTPUT: \n        msg.payload = 'Lx' --or-- 'L-stop' --or-- 'all-legs-done'\n*/\n\nvar d       = new Date() ;\nvar dow     = d.getDay() ;      // which day of the week is it?\n    node.warn('DoW is: ' + dow) ;\n    flow.set('dow',dow) ;       // for use in the net flows\n\nvar sprinkler_auto    = global.get('settings_cnf.sprinkler_auto') ;        // auto spinkling on or off \nvar legday  = global.get('sprinklerlegs_cnf.legday') ;  // get the array legdays from global memory vars\n    flow.set('legday',legday);                          // write legday array to flow variable\n\n/* now the variable legday[1][0] is 'L1A' ; and \n    and legday[1][1] is Monday morning for leg L1's switch status   */\n\nvar nextleg = flow.get('nextleg') ;         // if starting morning or afternoon = 'legnotstarted'\n                                            // if cycling already = 'do-nextleg'\n\nif (msg.payload == 'do-nextleg') {\n    var daypart = flow.get('daypart');\n} else {\n    var daypart = msg.payload ;             // 1st initialisation, from A or B input\n    flow.set('daypart',daypart);\n}                               \n\n\nif (sprinkler_auto === 0) { node.warn('A: Auto is off.') ; return [null];}    // if auto is set to 0, do nothing. \n\n//--------------------------------------------------------------\nif (daypart == 'A') {                               // Morning routines\n    do {                                            // do - while loop\n        switch (nextleg) {                          // get the next leg\n            case 'legnotstarted' :\n                nextleg = 'L1';\n                if (legday[0][dow] === 0) {nextleg = 'L1'; loopgo = 1 ;} else { loopgo = 0 ; }\n                break;\n            case 'L1' :\n                nextleg = 'L2';\n                if (legday[2][dow] === 0) {nextleg = 'L2'; loopgo = 1 ;} else { loopgo = 0 ; }\n                break;\n            case 'L2' :\n                nextleg = 'L3';\n                if (legday[4][dow] === 0) {nextleg = 'L3'; loopgo = 1 ;} else { loopgo = 0 ; }\n                break;\n            case 'L3' :\n                nextleg = 'L4';\n                if (legday[6][dow] === 0) {nextleg = 'L-stop'; loopgo = 1 ;} else { loopgo = 0 ; }\n                break;\n            case 'L4' :\n                nextleg = 'L-stop';\n                loopgo = 1;\n                break;\n            case 'L-stop' :\n                nextleg = 'all-legs-done' ;\n                loopgo = 0;\n                break;\n        } // end switch\n    } while (loopgo == 1) ; // end do loop \n} // end if - daypart = A, morning...\n\n//--------------------------------------------------------------\n\nif (daypart == 'B') {                               // Evening routines\n    do {                                            // do - while loop\n        switch (nextleg) {                          // get the next leg\n            case 'legnotstarted' :\n                nextleg = 'L1';\n                if (legday[1][dow] === 0) {nextleg = 'L1'; loopgo = 1 ;} else { loopgo = 0 ; }\n                //node.warn('Legday Array [1]['+dow+']: ' + legday[1][dow]);\n                break;\n            case 'L1' :\n                nextleg = 'L2';\n                if (legday[3][dow] === 0) {nextleg = 'L2'; loopgo = 1 ;} else { loopgo = 0 ;}\n                //node.warn('Legday Array [3]['+dow+']: ' + legday[3][dow]);\n                break;\n            case 'L2' :\n                nextleg = 'L3';\n                if (legday[5][dow] === 0) {nextleg = 'L3'; loopgo = 1 ;} else { loopgo = 0 ;}\n                //node.warn('Legday Array [5]['+dow+']: ' + legday[5][dow]);\n                break;\n            case 'L3' :\n                nextleg = 'L4';\n                if (legday[7][dow] === 0) {nextleg = 'L-stop'; loopgo = 1 ;} else { loopgo = 0 ;}\n                //node.warn('Legday Array [7]['+dow+']: ' + legday[7][dow]);\n                break;\n            case 'L4' :\n                nextleg = 'L-stop';\n                loopgo = 1;\n                break;\n            case 'L-stop' :\n                nextleg = 'all-legs-done' ;\n                loopgo = 0;\n                break;\n        } // end switch\n    } while (loopgo == 1) ; // end do loop \n} // end if - daypart = B, evening...\n//--------------------------------------------------------------\n\n\nif (nextleg == 'all-legs-done') {\n    flow.set('nextleg',undefined) ;\n    return [null] ;\n} else {\n    node.warn('A: nextleg is: ' + nextleg + ', daypart is: ' + daypart) ;\n    flow.set('nextleg',nextleg) ;\n    msg1 = {payload: nextleg} ;\n    return [msg1] ;\n}\n","outputs":"1","noerr":0,"x":356.3333282470703,"y":485.4444570541382,"wires":[["8fc9c261.70364"]]},{"id":"8fc9c261.70364","type":"function","z":"350b6686.caf49a","name":"B:LegX on, then off","func":"/*  msg.payload goes to mqtt Out node: ..../ESP62/cmd\n    INPUT eg : msg.payload   = 'L1'     // which is the next leg.\n    OUTPUT   : msg.payload   = 'event,L1'\n        or   : msg.payload   = 'event,allsprinkleroff' ; msg.thisleggoff = 'L1-OFF'\n*/\nvar sprinkler_auto    = global.get('settings_cnf.sprinkler_auto') ;        // auto spinkling on or off \nvar nextleg = msg.payload;\nvar daypart = flow.get('daypart') ;                     // A - Morning, B- evening\nvar dow     = flow.get('dow',dow) ;                     // day of week\nvar legday  = flow.get('legday') ;                      // the legday array\n\n// determine the legarray1, to use later to determine the leg sprinkling time\n    /*  legday[1][1] = 1    // L1B, Monday ~ switch it on\n        legday[0][8] = 12   // L1A, legtime for this leg......\n    */\n    if (daypart == 'A' && nextleg == 'L1') {legarray1 = 0;} \n    if (daypart == 'B' && nextleg == 'L1') {legarray1 = 1;} \n    if (daypart == 'A' && nextleg == 'L2') {legarray1 = 2;} \n    if (daypart == 'B' && nextleg == 'L2') {legarray1 = 3;} \n    if (daypart == 'A' && nextleg == 'L3') {legarray1 = 4;} \n    if (daypart == 'B' && nextleg == 'L3') {legarray1 = 5;} \n    if (daypart == 'A' && nextleg == 'L4') {legarray1 = 6;} \n    if (daypart == 'B' && nextleg == 'L4') {legarray1 = 7;} \n// done - determine legarray from leg, and daypart...\n\nflow.set('legarray1',legarray1) ;           // set a flow variable to reuse legarray in next node\n\nvar legtime = legday[legarray1][8];\n\nif ((sprinkler_auto === 0)|| (msg.auto === 0)) { node.warn = 'A:Auto is off.' ; return [null];}   \n                                            // if auto is set to 0, do nothing. \n\nif (nextleg !== undefined) {\n    if (msg.auto === undefined) {\n        // switch it on\n            node.warn('B: switch on leg: ' + nextleg) ;\n            msg1    = {payload:('event,'+ nextleg)};  \n            node.send([msg1]); \n            \n    /* TODO node.on('close', function() {           // tidy up any async code here - shutdown connections\n                });     */\n                \n        updateNodeStatus('red', 'Leg ' + nextleg + ' is On for ' + legtime + ' min');\n        // wait, then switch it off\n        interval(function(){\n            msg1    = {payload:('event,allsprinkleroff'), thisleggoff:(nextleg + '-OFF')};\n            updateNodeStatus('green', 'Ready');\n            node.warn('B: switch off leg: ' + nextleg) ;\n            flow.set('nextleg',nextleg);\n            node.send([msg1]); // 1-control; 2-messages\n        }, (legtime * 1000 * 60), 1);\n        \n    } else {\n        node.warn('Switched off override by Auto Off.');\n        return[null];\n        // stopinterval() ;\n    }\n} else {\n    node.warn('Next leg was undefined, stopping...') ;\n    return [null] ;\n}\n\n// ------------------------------------\n// http://thecodeship.com/web-development/alternative-to-javascript-evil-setinterval/\nfunction interval(func, wait, times){\n    var interv = function(w, t){\n        return function(){\n            if(typeof t === \"undefined\" || t-- > 0){\n                setTimeout(interv, w);\n                try{\n                    func.call(null);\n                }\n                catch(e){\n                    t = 0;\n                    throw e.toString();\n                }\n            }\n        };\n    }(wait, times);\n    setTimeout(interv, wait);\n}\n\nfunction stopinterval() {\n    clearTimeout(interv);\n}\n\n//-------------------------------\nfunction updateNodeStatus(color, txt) {\n    node.status({\n     fill : color,\n     shape : \"dot\",\n     text : txt\n    });\n}\n","outputs":"1","noerr":0,"x":596.3333282470703,"y":485.4444570541382,"wires":[["1b4abfdc.e4b54","7e753a8d.818ac4","c5167a0a.3ae988"]]},{"id":"1b4abfdc.e4b54","type":"function","z":"350b6686.caf49a","name":"C:LegRest","func":"/*  INPUT   : msg.payload   = 'event,L1' ; flow.get('nextleg') = 'Lx'\n        or  : msg.payload   = 'event,allsprinkleroff' ; msg.thisleggoff = 'L1-OFF'\n    OUTPUT  : msg.payload   = 'do-nextleg'                                      */\n\nvar nextleg     = flow.get('nextleg');\nvar sprinkler_auto        = global.get('settings_cnf.sprinkler_auto'); // auto spinkling on or off \nvar daypart     = flow.get('daypart') ;             // A - Morning, B- evening\nvar dow         = flow.get('dow') ;                 // day of week\nvar legday      = flow.get('legday') ;              // the legday array\nvar legarray1   = flow.get('legarray1') ;           // set a flow variable to reuse legarray in next node\nvar legrest     = legday[legarray1][9];             // get the legrest time per leg from the array\n\nif (msg.payload == 'event,allsprinkleroff') {\n        updateNodeStatus('red', 'Borehole off ' + legrest + ' min, after leg ' + nextleg );\n        interval(function(){                        // keep it off for a period\n            flow.set('nextleg',nextleg);\n            msg1    = {payload:'do-nextleg'} ;\n            msg2    = {payload:('C: Borehole wait over, after ' + nextleg + ' sprinkled.')} ;\n            node.send([[msg1],[msg2]]);             // 1-control; 2-messages\n            updateNodeStatus('green', 'Ready for new cycle' );\n        }, legrest * 1000 * 60, 1);\n\n} else if (msg.payload === 0) {\n    updateNodeStatus('green', 'Ready for new cycle' );\n    return null ;\n\n} else {\n    return null ;\n\n}\n\n// ------------------------------------\n// http://thecodeship.com/web-development/alternative-to-javascript-evil-setinterval/\nfunction interval(func, wait, times){\n    var interv = function(w, t){\n        return function(){\n            if(typeof t === \"undefined\" || t-- > 0){\n                setTimeout(interv, w);\n                try{\n                    func.call(null);\n                }\n                catch(e){\n                    t = 0;\n                    throw e.toString();\n                }\n            }\n        };\n    }(wait, times);\n\n    setTimeout(interv, wait);\n}\n\n//-------call function with updateNodeStatus('red', 'text' );--------\nfunction updateNodeStatus(color, txt) {\n    node.status({\n     fill : color,\n     shape : \"dot\",\n     text : txt\n    });\n}\n","outputs":"2","noerr":0,"x":499.3333282470703,"y":542.4444570541382,"wires":[["4db32bcb.b24cd4"],[]]},{"id":"b40b54d8.4bf4a8","type":"function","z":"350b6686.caf49a","name":"B - start","func":"msg.payload = 'B';  // kick-off evening routine\n\nflow.set('nextleg','legnotstarted');\n\nreturn msg;","outputs":1,"noerr":0,"x":147.3333282470703,"y":502.4444570541382,"wires":[["4db32bcb.b24cd4"]]},{"id":"d94d0222.26b3","type":"inject","z":"350b6686.caf49a","name":"Eve Go","topic":"","payload":"B","payloadType":"str","repeat":"","crontab":"00 18 * * *","once":false,"x":95.33332824707031,"y":539.4444570541382,"wires":[["b40b54d8.4bf4a8"]]},{"id":"7e753a8d.818ac4","type":"mqtt out","z":"350b6686.caf49a","name":"/ESP62/cmd","topic":"/ESP62/cmd","qos":"","retain":"","broker":"615bfa80.23f504","x":851.3333282470703,"y":476.4444570541382,"wires":[]},{"id":"dc9d3082.2362d","type":"comment","z":"350b6686.caf49a","name":"Auto Sprinkling","info":"","x":112.83332824707031,"y":389.4444570541382,"wires":[]},{"id":"615bfa80.23f504","type":"mqtt-broker","z":"","name":"","broker":"rhm_mqtt_1","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":""}]
